
package com.forkexec.pts.ws;

import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "PointsPortType", targetNamespace = "http://ws.pts.forkexec.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface PointsPortType {


    /**
     * 
     * @param userEmail
     * @return
     *     returns javax.xml.ws.Response<com.forkexec.pts.ws.ReadResponse>
     */
    @WebMethod(operationName = "read")
    @RequestWrapper(localName = "read", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.Read")
    @ResponseWrapper(localName = "readResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.ReadResponse")
    public Response<ReadResponse> readAsync(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail);

    /**
     * 
     * @param userEmail
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "read")
    @RequestWrapper(localName = "read", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.Read")
    @ResponseWrapper(localName = "readResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.ReadResponse")
    public Future<?> readAsync(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<ReadResponse> asyncHandler);

    /**
     * 
     * @param userEmail
     * @return
     *     returns com.forkexec.pts.ws.PointsView
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "read", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.Read")
    @ResponseWrapper(localName = "readResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.ReadResponse")
    @Action(input = "http://ws.pts.forkexec.com/PointsPortType/read", output = "http://ws.pts.forkexec.com/PointsPortType/readResponse")
    public PointsView read(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail);

    /**
     * 
     * @param userEmail
     * @param tag
     * @param value
     * @return
     *     returns javax.xml.ws.Response<com.forkexec.pts.ws.WriteResponse>
     */
    @WebMethod(operationName = "write")
    @RequestWrapper(localName = "write", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.Write")
    @ResponseWrapper(localName = "writeResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.WriteResponse")
    public Response<WriteResponse> writeAsync(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail,
        @WebParam(name = "value", targetNamespace = "")
        int value,
        @WebParam(name = "tag", targetNamespace = "")
        int tag);

    /**
     * 
     * @param userEmail
     * @param tag
     * @param asyncHandler
     * @param value
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "write")
    @RequestWrapper(localName = "write", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.Write")
    @ResponseWrapper(localName = "writeResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.WriteResponse")
    public Future<?> writeAsync(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail,
        @WebParam(name = "value", targetNamespace = "")
        int value,
        @WebParam(name = "tag", targetNamespace = "")
        int tag,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<WriteResponse> asyncHandler);

    /**
     * 
     * @param userEmail
     * @param tag
     * @param value
     */
    @WebMethod
    @RequestWrapper(localName = "write", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.Write")
    @ResponseWrapper(localName = "writeResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.WriteResponse")
    @Action(input = "http://ws.pts.forkexec.com/PointsPortType/write", output = "http://ws.pts.forkexec.com/PointsPortType/writeResponse")
    public void write(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail,
        @WebParam(name = "value", targetNamespace = "")
        int value,
        @WebParam(name = "tag", targetNamespace = "")
        int tag);

    /**
     * 
     * @param userEmail
     * @return
     *     returns javax.xml.ws.Response<com.forkexec.pts.ws.GetTagResponse>
     */
    @WebMethod(operationName = "getTag")
    @RequestWrapper(localName = "getTag", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.GetTag")
    @ResponseWrapper(localName = "getTagResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.GetTagResponse")
    public Response<GetTagResponse> getTagAsync(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail);

    /**
     * 
     * @param userEmail
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getTag")
    @RequestWrapper(localName = "getTag", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.GetTag")
    @ResponseWrapper(localName = "getTagResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.GetTagResponse")
    public Future<?> getTagAsync(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetTagResponse> asyncHandler);

    /**
     * 
     * @param userEmail
     * @return
     *     returns int
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTag", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.GetTag")
    @ResponseWrapper(localName = "getTagResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.GetTagResponse")
    @Action(input = "http://ws.pts.forkexec.com/PointsPortType/getTag", output = "http://ws.pts.forkexec.com/PointsPortType/getTagResponse")
    public int getTag(
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail);

    /**
     * 
     * @param input
     * @return
     *     returns javax.xml.ws.Response<com.forkexec.pts.ws.CtrlPingResponse>
     */
    @WebMethod(operationName = "ctrlPing")
    @RequestWrapper(localName = "ctrlPing", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlPing")
    @ResponseWrapper(localName = "ctrlPingResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlPingResponse")
    public Response<CtrlPingResponse> ctrlPingAsync(
        @WebParam(name = "input", targetNamespace = "")
        String input);

    /**
     * 
     * @param input
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "ctrlPing")
    @RequestWrapper(localName = "ctrlPing", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlPing")
    @ResponseWrapper(localName = "ctrlPingResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlPingResponse")
    public Future<?> ctrlPingAsync(
        @WebParam(name = "input", targetNamespace = "")
        String input,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CtrlPingResponse> asyncHandler);

    /**
     * 
     * @param input
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ctrlPing", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlPing")
    @ResponseWrapper(localName = "ctrlPingResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlPingResponse")
    @Action(input = "http://ws.pts.forkexec.com/PointsPortType/ctrlPingRequest", output = "http://ws.pts.forkexec.com/PointsPortType/ctrlPingResponse")
    public String ctrlPing(
        @WebParam(name = "input", targetNamespace = "")
        String input);

    /**
     * 
     * @param startPoints
     * @return
     *     returns javax.xml.ws.Response<com.forkexec.pts.ws.CtrlInitResponse>
     */
    @WebMethod(operationName = "ctrlInit")
    @RequestWrapper(localName = "ctrlInit", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlInit")
    @ResponseWrapper(localName = "ctrlInitResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlInitResponse")
    public Response<CtrlInitResponse> ctrlInitAsync(
        @WebParam(name = "startPoints", targetNamespace = "")
        int startPoints);

    /**
     * 
     * @param asyncHandler
     * @param startPoints
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "ctrlInit")
    @RequestWrapper(localName = "ctrlInit", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlInit")
    @ResponseWrapper(localName = "ctrlInitResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlInitResponse")
    public Future<?> ctrlInitAsync(
        @WebParam(name = "startPoints", targetNamespace = "")
        int startPoints,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CtrlInitResponse> asyncHandler);

    /**
     * 
     * @param startPoints
     * @throws BadInitFault_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "ctrlInit", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlInit")
    @ResponseWrapper(localName = "ctrlInitResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlInitResponse")
    @Action(input = "http://ws.pts.forkexec.com/PointsPortType/ctrlInitRequest", output = "http://ws.pts.forkexec.com/PointsPortType/ctrlInitResponse", fault = {
        @FaultAction(className = BadInitFault_Exception.class, value = "http://ws.pts.forkexec.com/PointsPortType/ctrlInit/Fault/BadInitFault")
    })
    public void ctrlInit(
        @WebParam(name = "startPoints", targetNamespace = "")
        int startPoints)
        throws BadInitFault_Exception
    ;

    /**
     * 
     * @return
     *     returns javax.xml.ws.Response<com.forkexec.pts.ws.CtrlClearResponse>
     */
    @WebMethod(operationName = "ctrlClear")
    @RequestWrapper(localName = "ctrlClear", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlClear")
    @ResponseWrapper(localName = "ctrlClearResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlClearResponse")
    public Response<CtrlClearResponse> ctrlClearAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "ctrlClear")
    @RequestWrapper(localName = "ctrlClear", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlClear")
    @ResponseWrapper(localName = "ctrlClearResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlClearResponse")
    public Future<?> ctrlClearAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<CtrlClearResponse> asyncHandler);

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "ctrlClear", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlClear")
    @ResponseWrapper(localName = "ctrlClearResponse", targetNamespace = "http://ws.pts.forkexec.com/", className = "com.forkexec.pts.ws.CtrlClearResponse")
    @Action(input = "http://ws.pts.forkexec.com/PointsPortType/ctrlClearRequest", output = "http://ws.pts.forkexec.com/PointsPortType/ctrlClearResponse")
    public void ctrlClear();

}
