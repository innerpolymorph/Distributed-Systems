
package com.forkexec.rst.ws;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10
 * Generated source version: 2.2
 * 
 */
@WebService(name = "RestaurantPortType", targetNamespace = "http://ws.rst.forkexec.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface RestaurantPortType {


    /**
     * 
     * @param menuId
     * @return
     *     returns com.forkexec.rst.ws.Menu
     * @throws BadMenuIdFault_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getMenu", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.GetMenu")
    @ResponseWrapper(localName = "getMenuResponse", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.GetMenuResponse")
    @Action(input = "http://ws.rst.forkexec.com/RestaurantPortType/getMenuRequest", output = "http://ws.rst.forkexec.com/RestaurantPortType/getMenuResponse", fault = {
        @FaultAction(className = BadMenuIdFault_Exception.class, value = "http://ws.rst.forkexec.com/RestaurantPortType/getMenu/Fault/BadMenuIdFault")
    })
    public Menu getMenu(
        @WebParam(name = "menuId", targetNamespace = "")
        MenuId menuId)
        throws BadMenuIdFault_Exception
    ;

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "ctrlClear", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.CtrlClear")
    @ResponseWrapper(localName = "ctrlClearResponse", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.CtrlClearResponse")
    @Action(input = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlClearRequest", output = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlClearResponse")
    public void ctrlClear();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns com.forkexec.rst.ws.MenuOrder
     * @throws BadMenuIdFault_Exception
     * @throws InsufficientQuantityFault_Exception
     * @throws BadQuantityFault_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "orderMenu", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.OrderMenu")
    @ResponseWrapper(localName = "orderMenuResponse", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.OrderMenuResponse")
    @Action(input = "http://ws.rst.forkexec.com/RestaurantPortType/orderMenuRequest", output = "http://ws.rst.forkexec.com/RestaurantPortType/orderMenuResponse", fault = {
        @FaultAction(className = BadMenuIdFault_Exception.class, value = "http://ws.rst.forkexec.com/RestaurantPortType/orderMenu/Fault/BadMenuIdFault"),
        @FaultAction(className = BadQuantityFault_Exception.class, value = "http://ws.rst.forkexec.com/RestaurantPortType/orderMenu/Fault/BadQuantityFault"),
        @FaultAction(className = InsufficientQuantityFault_Exception.class, value = "http://ws.rst.forkexec.com/RestaurantPortType/orderMenu/Fault/InsufficientQuantityFault")
    })
    public MenuOrder orderMenu(
        @WebParam(name = "arg0", targetNamespace = "")
        MenuId arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1)
        throws BadMenuIdFault_Exception, BadQuantityFault_Exception, InsufficientQuantityFault_Exception
    ;

    /**
     * 
     * @param initialMenus
     * @throws BadInitFault_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "ctrlInit", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.CtrlInit")
    @ResponseWrapper(localName = "ctrlInitResponse", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.CtrlInitResponse")
    @Action(input = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlInitRequest", output = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlInitResponse", fault = {
        @FaultAction(className = BadInitFault_Exception.class, value = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlInit/Fault/BadInitFault")
    })
    public void ctrlInit(
        @WebParam(name = "initialMenus", targetNamespace = "")
        List<MenuInit> initialMenus)
        throws BadInitFault_Exception
    ;

    /**
     * 
     * @param input
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ctrlPing", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.CtrlPing")
    @ResponseWrapper(localName = "ctrlPingResponse", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.CtrlPingResponse")
    @Action(input = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlPingRequest", output = "http://ws.rst.forkexec.com/RestaurantPortType/ctrlPingResponse")
    public String ctrlPing(
        @WebParam(name = "input", targetNamespace = "")
        String input);

    /**
     * 
     * @param descriptionText
     * @return
     *     returns java.util.List<com.forkexec.rst.ws.Menu>
     * @throws BadTextFault_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "searchMenus", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.SearchMenus")
    @ResponseWrapper(localName = "searchMenusResponse", targetNamespace = "http://ws.rst.forkexec.com/", className = "com.forkexec.rst.ws.SearchMenusResponse")
    @Action(input = "http://ws.rst.forkexec.com/RestaurantPortType/searchMenusRequest", output = "http://ws.rst.forkexec.com/RestaurantPortType/searchMenusResponse", fault = {
        @FaultAction(className = BadTextFault_Exception.class, value = "http://ws.rst.forkexec.com/RestaurantPortType/searchMenus/Fault/BadTextFault")
    })
    public List<Menu> searchMenus(
        @WebParam(name = "descriptionText", targetNamespace = "")
        String descriptionText)
        throws BadTextFault_Exception
    ;

}
